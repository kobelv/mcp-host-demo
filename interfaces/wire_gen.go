// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package interfaces

import (
	"context"
	"mcp-host-demo/application/appservice"
	"mcp-host-demo/domain/dservice"
	"mcp-host-demo/infrastructure/adapter"
	"mcp-host-demo/infrastructure/common/cache"
	"mcp-host-demo/infrastructure/common/logit"
	"mcp-host-demo/infrastructure/common/request"
	"mcp-host-demo/infrastructure/common/response"
	"mcp-host-demo/interfaces/http"
	"mcp-host-demo/interfaces/http/controller"
)

// Injectors from wire.go:

func NewApp(ctx context.Context) (*app, error) {
	serviceLoggerConf, err := logit.NewServiceLoggerConf()
	if err != nil {
		return nil, err
	}
	loggerInterface, err := logit.NewServiceLogger(serviceLoggerConf)
	if err != nil {
		return nil, err
	}
	appConf, err := loadAppConf()
	if err != nil {
		return nil, err
	}
	bindInterface := request.NewRequest(loggerInterface)
	httpResponseInterface := response.NewHTTPResponseWriter(loggerInterface)
	chatAdapter := adapter.NewChatAdapter(loggerInterface)
	mcpServerAdapter := adapter.NewMcpServerAdapter(ctx, loggerInterface)
	chatDS := dservice.NewChatDS(chatAdapter, mcpServerAdapter)
	chatAS := appservice.NewChatAS(chatDS)
	chat := controller.NewChat(bindInterface, httpResponseInterface, chatAS)
	redis, err := cache.NewRedis()
	if err != nil {
		return nil, err
	}
	health := controller.NewHealth(httpResponseInterface, redis)
	handler := http.NewHTTPHandler(loggerInterface, chat, health, httpResponseInterface)
	server, err := newHTTPServer(appConf, handler)
	if err != nil {
		return nil, err
	}
	interfacesApp := &app{
		ctx:        ctx,
		logger:     loggerInterface,
		conf:       appConf,
		httpServer: server,
	}
	return interfacesApp, nil
}
